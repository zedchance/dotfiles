# TEMPLATE
snippet TEMPLATE "Template" bA
% $1

\documentclass{article}
\input{../../preamble.tex}

\title{$2}
\date{$3}

\begin{document}
\maketitle
\tableofcontents
\newpage

$0

\end{document}
endsnippet

# GLOBAL CONTEXT
global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


# Environments
snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet ALI "align*" bA
\begin{align*}
	$0
\end{align*}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

# Bold and italics
snippet bold "textbf"
\\textbf{$1}$0
endsnippet

snippet ital "textit"
\\textit{$1}$0
endsnippet

# Inline math
snippet mk "Math" wA
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Display math
snippet dm "Math" wA
\[
$1
\] $0
endsnippet

# Sub and super scripts
context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet __ "subscript with brackets" iA
_{$1}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet

# ldots inside math
context "math()"
snippet ... "ldots" iA
\\ldots$0
endsnippet

# sqrt inside math
context "math()"
snippet root "square root" iA
\\sqrt{$1}$0
endsnippet

# Aligned equals with newline at end
context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

# Infinity symbol in math
context "math()"
snippet ooo "infty" iA
\infty$0
endsnippet

# Text in math mode
context "math()"
snippet text "Text in math mode" iA
\\text{$1} $0
endsnippet

# Fractions
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# bars, hats, and tildes
priority 10
context "math()"
snippet "bar" "bar" riA
\bar{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\bar{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "tilde" "tilde" riA
\tilde{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])tilde" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}
endsnippet

# Parenthesis
snippet LEFT "Left Right Parenthesis" wA
\left( $1 \right) $0
endsnippet

# Quotes
snippet `` "quotes" wA
\`\`$1''$0
endsnippet

# leq geq and neq
context "math()"
snippet "<=" "less than or equal" riA
\\leq $0
endsnippet

context "math()"
snippet ">=" "greater than or equal" riA
\\geq $0
endsnippet

context "math()"
snippet "!=" "not equal" riA
\\neq $0
endsnippet

# lim, int and sum
context "math()"
snippet lim "limit" wA
\\lim_{$1 \to $2} $0
endsnippet

context "math()"
snippet int "integral" wA
\\int_{$1}^{$2} $3 \,\mathrm{d}$4 $0
endsnippet

context "math()"
snippet sum "sum" wA
\\sum_{i = $1}^{$2} $0
endsnippet

